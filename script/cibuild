#!/bin/bash

cd "$(dirname "$0")/../ReactiveCocoaFramework"
SCRIPT_DIR=../script

##
## Configuration Variables
##

# The build configuration to use.
if [ -z "$XCCONFIGURATION" ]
then
    XCCONFIGURATION="Release"
fi

# The workspace to build.
#
# If not set and no workspace is found, the -workspace flag will not be passed
# to xcodebuild.
if [ -z "$XCWORKSPACE" ]
then
    XCWORKSPACE=$(ls -d *.xcworkspace 2>/dev/null | head -n 1)
fi

# A bootstrap script to run before building.
#
# If this file does not exist, it is not considered an error.
BOOTSTRAP="$SCRIPT_DIR/bootstrap"

# A whitespace-separated list of default targets or schemes to build, if none
# are specified on the command line.
#
# Individual names can be quoted to avoid word splitting.
DEFAULT_TARGETS=

# Extra build settings to pass to xcodebuild.
XCODEBUILD_SETTINGS="RUN_CLANG_STATIC_ANALYZER=NO"

##
## Build Process
##

run_xcodebuild ()
{
    if [ -n "$XCWORKSPACE" ]
    then
        xcodebuild -workspace "$XCWORKSPACE" -configuration "$XCCONFIGURATION" "$@" OBJROOT="$PWD/build" SYMROOT="$PWD/build" $XCODEBUILD_SETTINGS 2>&1
    else
        xcodebuild -configuration "$XCCONFIGURATION" "$@" OBJROOT="$PWD/build" SYMROOT="$PWD/build" $XCODEBUILD_SETTINGS 2>&1
    fi

    local status=$?

    return $status
}

parse_build ()
{
    awk -f "$SCRIPT_DIR/xcodebuild.awk"
}

build_scheme ()
{
    local scheme=$1

    run_xcodebuild -scheme "$scheme" test | parse_build

    local awkstatus=$?
    local xcstatus=${PIPESTATUS[0]}
    local sdkflag=

    # If this scheme targets iOS, try building for the simulator.
    if [ "$awkstatus" -eq "3" ]
    then
        sdkflag="-sdk iphonesimulator"
        run_xcodebuild $sdkflag -scheme "$scheme" test | parse_build

        awkstatus=$?
        xcstatus=${PIPESTATUS[0]}
    fi

    # If this scheme doesn't support the `test` action, try again with `build`.
    if [ "$awkstatus" -eq "2" ]
    then
        run_xcodebuild $sdkflag -scheme "$scheme" build | parse_build

        awkstatus=$?
        xcstatus=${PIPESTATUS[0]}
    fi

    if [ "$xcstatus" -eq "65" ]
    then
        # This probably means that there's no scheme by that name. Give up.
        echo "*** Error building scheme $scheme -- perhaps it doesn't exist"
    elif [ "$awkstatus" -eq "1" ]
    then
        return $awkstatus
    fi

    return $xcstatus
}

build_targets ()
{
    echo "*** The following targets will be built:"

    for target in "$@"
    do
        echo "$target"
    done

    echo "*** Building..."

    for scheme in "$@"
    do
        build_scheme "$scheme" || exit $?
    done
}

export -f build_targets

if [ -f "$BOOTSTRAP" ]
then
    echo "*** Bootstrapping..."
    bash "$BOOTSTRAP" || exit $?
fi

echo "*** Cleaning all targets..."
xcodebuild -alltargets -configuration "$XCCONFIGURATION" clean OBJROOT="$PWD/build" SYMROOT="$PWD/build" $XCODEBUILD_SETTINGS 2>&1 >/dev/null

if [ "$#" -ne "0" ]
then
    build_targets "$@"
elif [ -n "$DEFAULT_TARGETS" ]
then
    build_targets $DEFAULT_TARGETS
else
    targets=$(xcodebuild -list | awk -f "$SCRIPT_DIR/targets.awk")

    echo -e "*** The following targets will be built:\n$targets"
    echo "*** Building..."

    echo "$targets" | while read line
    do
        build_scheme "$line"
    done
fi
